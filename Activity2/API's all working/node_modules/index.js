const express = require("express");
const mongoose = require("mongoose");
const app = express();
app.use(express.json());

const NewsModel = require("./models/news");

mongoose
  .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("Connected to DB"))
  .catch((error) => console.error("Error connecting to DB:", error.message));

app.listen(3000, () => console.log("Server is running on port 3000"));

app.get("/", (req, res) => res.json({ name: "News API" }));

app.post("/api/addnews", async (req, res) => {
  try {
    const news = await NewsModel.create(req.body);
    res.status(201).json(news);
  } catch (error) {
    res.status(500).json({ message: "Error adding news", error: error.message });
  }
});

app.get("/api/news", async (req, res) => {
  try {
    const news = await NewsModel.find({});
    res.status(200).json(news);
  } catch (error) {
    res.status(500).json({ message: "Error retrieving news", error: error.message });
  }
});

app.get("/api/news/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const news = await NewsModel.findById(id);
    if (!news) return res.status(404).json({ message: "News not found" });
    res.status(200).json(news);
  } catch (error) {
    res.status(500).json({ message: "Error retrieving news", error: error.message });
  }
});

app.put("/api/news/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const updatedNews = await NewsModel.findByIdAndUpdate(id, req.body, { new: true });
    if (!updatedNews) return res.status(404).json({ message: "News not found" });
    res.status(200).json(updatedNews);
  } catch (error) {
    res.status(500).json({ message: "Error updating news", error: error.message });
  }
});

app.delete("/api/news/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const deletedNews = await NewsModel.findByIdAndDelete(id);
    if (!deletedNews) return res.status(404).json({ message: "News not found" });
    res.status(200).json({ message: "News deleted successfully" });
  } catch (error) {
    res.status(500).json({ message: "Error deleting news", error: error.message });
  }
});

